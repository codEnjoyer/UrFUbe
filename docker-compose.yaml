version: "3.8"
services:
  db:
    image: postgres:15
    container_name: db_app
    expose:
      - 1221
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'" ]
      interval: 3s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: fastapi_app
    entrypoint: [ "sh", "/fastapi_app/docker/app.sh" ]
    ports:
      - "${APP_PORT}:${APP_PORT}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${APP_PORT}" ]
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      db:
        condition: service_healthy

  broker:
    build:
      context: .
      dockerfile: docker/rabbitmq.Dockerfile
    container_name: rabbitmq_app
    hostname: "${BROKER_HOSTNAME}"
    env_file:
      - .env
    expose:
      - "${BROKER_PORT}"
    ports:
      - "${BROKER_HOST_PORT}:${BROKER_HOST_PORT}"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BROKER_HOST_PORT}"]
      interval: 5s
      timeout: 10s
      retries: 5

# region Redis
#  broker:
#    image: redis:7
#    env_file:
#      - .env
#    container_name: redis_app
#    hostname: redis
#    command: "redis-server --save 20 1 --loglevel warning"
#    expose:
#      - "${BROKER_PORT}"
#    ports:
#      - "${BROKER_HOST_PORT}:${BROKER_HOST_PORT}"
#    restart: on-failure
#    healthcheck:
#      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
#      interval: 5s
#      timeout: 10s
#      retries: 5
#    depends_on:
#      backend:
#        condition: service_healthy
# endregion

  celery:
    build:
      context: .
    env_file:
      - .env
    container_name: celery_app
    command: [ "/fastapi_app/docker/celery.sh", "celery" ]
    depends_on:
      broker:
        condition: service_healthy
#      backend:
#        condition: service_healthy

  flower:
    build:
      context: .
    env_file:
      - .env
    container_name: flower_app
    command: [ "/fastapi_app/docker/celery.sh", "flower" ]
    ports:
      - "${FLOWER_HOST_PORT}:${CELERY_PORT}"
    depends_on:
      broker:
        condition: service_healthy
      celery:
        condition: service_started
